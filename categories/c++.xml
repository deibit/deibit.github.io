<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>deibit (c++)</title><link>http://deibit.com/</link><description></description><atom:link href="http://deibit.com/categories/c%2B%2B.xml" rel="self" type="application/rss+xml"></atom:link><language>es</language><lastBuildDate>Sun, 17 Jul 2016 10:19:58 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Solving "ld: symbol(s) not found for architecture x86_64" in OSX</title><link>http://deibit.com/posts/2013/04/11/solving-ld-symbols-not-found-for-architecture-x86_64-in-osx/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;It seems that this error is rather frequently when compiling programs. I found mine compiling a dumb example after building &lt;a href="https://github.com/LaurentGomila/SFML"&gt;SFML 2.0&lt;/a&gt; (git)&lt;/p&gt;
&lt;p&gt;After browsing several answers none of them worked for me. Making a “lipo -info” on all the framework libs gives a perfect “x86_64″ seal of approval…mmm&lt;/p&gt;
&lt;p&gt;I tried to force clang++ with the known flags combinations -m32, -m64, -std=c++11, -stdlib=libc++ and so on.&lt;/p&gt;
&lt;p&gt;None.&lt;/p&gt;
&lt;p&gt;A short time before giving up a light was turned on.&lt;/p&gt;
&lt;p&gt;I remembered installing SFML before as a shared library instead of a framework and there were a bunch of previous headers installed in /usr/local/include/SFML.&lt;/p&gt;
&lt;p&gt;Deleting it all the next go went right.&lt;/p&gt;
&lt;p&gt;The problem here was (I suspect) that the compiler was looking for the /usr/local/include before the headers that inhabit the same folder framework hence causing odd errors.&lt;/p&gt;
&lt;p&gt;Here is the output when applied the -v flag in clang++&lt;/p&gt;
&lt;p&gt;/usr/include/c++/4.2.1&lt;br&gt;
/usr/include/c++/4.2.1/backward&lt;br&gt;
/usr/local/include&lt;br&gt;
/usr/bin/../lib/clang/4.2/include&lt;br&gt;
/usr/include&lt;br&gt;
/System/Library/Frameworks (framework directory)&lt;br&gt;
/Library/Frameworks (framework directory)&lt;/p&gt;
&lt;p&gt;As you may note /usr/local/include is before /Library/Frameworks&lt;/p&gt;
</description><category>c++</category><category>clang</category><category>error</category><category>game</category><category>osx</category><category>Programming</category><category>sfml</category><guid>http://deibit.com/posts/2013/04/11/solving-ld-symbols-not-found-for-architecture-x86_64-in-osx/</guid><pubDate>Thu, 11 Apr 2013 21:00:16 GMT</pubDate></item><item><title>Calling Python from C++</title><link>http://deibit.com/posts/2013/02/17/calling-python-from-c/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;Just a little snippet of code to show how to call python (an entire Python interpreter) from inside a C++ program:&lt;/p&gt;
&lt;p&gt;[code lang="cpp"]&lt;br&gt;
#include &amp;lt;Python.h&amp;gt;&lt;/p&gt;
&lt;p&gt;int main(int argc, char const *argv[])&lt;br&gt;
{&lt;br&gt;
Py_SetProgramName(const_cast&amp;lt;char*&amp;gt;(argv[0]));&lt;br&gt;
Py_Initialize();&lt;br&gt;
PyRun_SimpleString("from time import time,ctime\n" "print ‘Today is’,ctime(time())\n");&lt;br&gt;
Py_Finalize();&lt;br&gt;
return 0;&lt;br&gt;
}&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;You will need the path to the Python headers and library “libpython2.7″ (2.7 for the Python version).&lt;/p&gt;
&lt;p&gt;In OSX I asked clang++ this way:&lt;/p&gt;
&lt;p&gt;clang++ -I./python2.7 -L. -lpython2.7 pyfromcpp.cpp -o pyfromcpp
&lt;/p&gt;</description><category>c++</category><category>call</category><category>calling</category><category>clang</category><category>Python</category><guid>http://deibit.com/posts/2013/02/17/calling-python-from-c/</guid><pubDate>Sun, 17 Feb 2013 00:50:36 GMT</pubDate></item><item><title>A couple of new books for the next weeks!</title><link>http://deibit.com/posts/2012/09/10/a-couple-of-new-books-for-the-next-weeks/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;&lt;img src="http://daganu.files.wordpress.com/2012/09/libros.jpg" alt="A couple of new books for the next weeks!" class="size-full wp-image-560"&gt;
&lt;/p&gt;&lt;p&gt;C++ Primer (5 edition) and C++ Concurrency in Action&lt;/p&gt;
</description><category>books</category><category>c++</category><category>Image</category><guid>http://deibit.com/posts/2012/09/10/a-couple-of-new-books-for-the-next-weeks/</guid><pubDate>Mon, 10 Sep 2012 09:44:58 GMT</pubDate></item><item><title>A little snippet showing some C++ 11 features</title><link>http://deibit.com/posts/2012/01/11/a-little-snippet-showing-some-c-11-features/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;Title says it all:&lt;/p&gt;
&lt;p&gt;[sourcecode language="cpp"]&lt;br&gt;
// $clang++ –std=c++0x –stdlib=libc++ snippet.cpp -o snippet&lt;/p&gt;
&lt;p&gt;#include &amp;lt;vector&amp;gt;&lt;br&gt;
#include &amp;lt;iostream&amp;gt;&lt;/p&gt;
&lt;p&gt;using namespace std;&lt;/p&gt;
&lt;p&gt;int main()&lt;br&gt;
{&lt;br&gt;
    auto vv = vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;(); //1&lt;br&gt;
    auto v = vector&amp;lt;int&amp;gt;(); //2&lt;br&gt;
    v.push_back(1);&lt;br&gt;
    v.push_back(2);&lt;br&gt;
    for(int z:v) //3&lt;br&gt;
    {&lt;br&gt;
        cout &amp;lt;&amp;lt; z &amp;lt;&amp;lt; endl;&lt;br&gt;
    }&lt;br&gt;
    return 0;&lt;br&gt;
}&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;1.- No more angle bracket mess&lt;br&gt;
2.- auto type inference&lt;br&gt;
3.- new for (…the win!)&lt;/p&gt;
</description><category>c++</category><category>c++0x</category><category>c++11</category><guid>http://deibit.com/posts/2012/01/11/a-little-snippet-showing-some-c-11-features/</guid><pubDate>Wed, 11 Jan 2012 01:33:40 GMT</pubDate></item><item><title>Minetest-c55 running on a Ubuntu x64 virtualized in a Mac OSX Lion</title><link>http://deibit.com/posts/2011/09/27/minetest-c55-running-on-a-ubuntu-x64-virtualized-in-a-mac-osx-lion/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;&lt;a href="http://celeron.55.lt/minetest/"&gt;Minetest-c55&lt;/a&gt; is a &lt;a href="http://www.minecraft.net/"&gt;Minecraft&lt;/a&gt; clone written in the fabulous and mighty C++ programming language.&lt;/p&gt;
&lt;p&gt;I was so lazy to gather all requested dependencies for OSX so I asked myself: Why not try on a virtualized Ubuntu?&lt;/p&gt;
&lt;p&gt;Here is the program running (btw so fast!) on a Ubuntu x64 v-box:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://daganu.files.wordpress.com/2011/09/50-00001.png"&gt;&lt;img src="http://daganu.files.wordpress.com/2011/09/50-00001.png?w=300" alt="" title="50 +00001" width="300" height="208" class="aligncenter size-medium wp-image-331"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Version of Minetest is from the &lt;a href="https://github.com/celeron55/minetest"&gt;Github repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Kudos to celeron55. &lt;/p&gt;
</description><category>c++</category><category>game</category><category>minecraft</category><category>minetest</category><category>ubuntu</category><category>Videogames</category><category>virtualization</category><guid>http://deibit.com/posts/2011/09/27/minetest-c55-running-on-a-ubuntu-x64-virtualized-in-a-mac-osx-lion/</guid><pubDate>Tue, 27 Sep 2011 14:38:54 GMT</pubDate></item><item><title>vim: Configurar (de una vez por todas) OmniCppComplete</title><link>http://deibit.com/posts/2011/04/19/vim-configurar-de-una-vez-por-todas-omnicppcomplete/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;Una de las cosas que me traían mosqueado era el autocompletado en Vim para el lenguaje C++ (el lenguaje más complejo inventado por un ser humano). Para ello disponíamos de un plugin llamado “&lt;a href="http://www.vim.org/scripts/script.php?script_id=1520"&gt;OmniCppComplete&lt;/a&gt;” que venía a paliar la falta de una buena función de completado para C++ (se tiraba, hasta donde llegaba de la de C).&lt;/p&gt;
&lt;p&gt;El problema es que hay distintas configuraciones para OmniCppComplete pululando por ahí, y entre experimentos y pruebas ninguna parecía funcionar; entre otras cosas por el quasihackeo que hay que hacerle a las cabeceras de la STL para poder obtener el ansiado completado cuando usamos esta librería.&lt;/p&gt;
&lt;p&gt;La base de OmniCppComplete son los archivos generados por la herramienta “ctags”. Por cada librería que usemos, si queremos disponer del autocompletado debemos generar un archivo ctags. Y no de cualquier forma. Si variamos la configuración de ctags es posible que no obtengamos el resultado previsto.&lt;/p&gt;
&lt;p&gt;A esto hay que sumarle la configuración del propio OmniCppComplete en nuestro “vimrc”, aquí dejo la que me ha funcionado con comentarios:&lt;/p&gt;
&lt;p&gt;[sourcecode]&lt;br&gt;
" Directorios donde encontrar ctags&lt;br&gt;
set tags+=~/.vim/.tags/stl&lt;br&gt;
set tags+=./tags&lt;/p&gt;
&lt;p&gt;" Mapeado para generar ctags de nuestro proyecto&lt;br&gt;
noremap &amp;lt;F12&amp;gt; :!ctags -R –c++-kinds=+p –fields=+iaS –extra=+q .&amp;lt;cr&amp;gt;&lt;br&gt;
inoremap &amp;lt;F12&amp;gt; &amp;lt;Esc&amp;gt;:!ctags -R –c++-kinds=+p –fields=+iaS –extra=+q .&amp;lt;cr&amp;gt; &lt;/p&gt;
&lt;p&gt;" Opciones para OmniCppComplete&lt;br&gt;
let OmniCpp_NamespaceSearch = 1&lt;br&gt;
let OmniCpp_GlobalScopeSearch = 1&lt;br&gt;
let OmniCpp_ShowAccess = 1&lt;br&gt;
let OmniCpp_MayCompleteDot = 1&lt;br&gt;
let OmniCpp_MayCompleteArrow = 1&lt;br&gt;
let OmniCpp_MayCompleteScope = 1&lt;br&gt;
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"] &lt;/p&gt;
&lt;p&gt;" Opciones para el menu de completado&lt;br&gt;
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif&lt;br&gt;
set completeopt=menuone,menu,longest,preview&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;En “~/.vim/.tags” voy dejando los archivos ctags de las librerías típicas: stl, boost, Qt… y en “./tags” se dejan las tags del proyecto actual. &lt;/p&gt;
&lt;p&gt;Hay que acordarse de actualizar la variable “OmniCpp_DefaultNamespaces” con los espacios de nombres que agreguemos.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Generando las tags para la STL&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Una de las primeras cosas que querremos es el completado para STL. Hay que bajar las cabeceras preparadas para procesarlas por ctags desde &lt;a href="http://www.vim.org/scripts/script.php?script_id=2358"&gt;aquí&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Luego sobre el directorio descomprimido:&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash"]&lt;br&gt;
ctags -R –c++-kinds=+p –fields=+iaS –extra=+q –language-force=C++ cpp_src&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;Y ya tenemos nuestro archivo de tags para copiarlo a “~/vim/.tags” o donde queramos (siempre que luego lo reflejemos en el vimrc con tags+=).&lt;/p&gt;
&lt;p&gt;Una captura con el completado:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://daganu.files.wordpress.com/2011/04/stlcompletion.png"&gt;&lt;img src="http://daganu.files.wordpress.com/2011/04/stlcompletion.png?w=300" alt="" title="stlcompletion" width="300" height="253" class="aligncenter size-medium wp-image-274"&gt;&lt;/a&gt;&lt;/p&gt;
</description><category>autocomplete</category><category>c++</category><category>vim</category><guid>http://deibit.com/posts/2011/04/19/vim-configurar-de-una-vez-por-todas-omnicppcomplete/</guid><pubDate>Tue, 19 Apr 2011 04:50:15 GMT</pubDate></item><item><title>Crear librerías dinámicas en Mac OSX</title><link>http://deibit.com/posts/2010/12/16/crear-librerias-dinamicas-en-mac-osx/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;Compilando sqllite3 para Mac OSX sale un archivo objeto sqlite3.o. Con el podemos enlazarlo estáticamente con nuestro ejecutable:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;bellucci:sqlite-autoconf-3070400 david$ gcc libsqlite3.o test.c -o test-stat&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;vemos con file:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;bellucci:sqlite-autoconf-3070400 david$ file libsqlite3.o&lt;br&gt;
libsqlite3.o: Mach-O 64-bit object x86_64&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Ese libsqlite3.o lo podemos transformar en una librería dinámica con:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;bellucci:sqlite-autoconf-3070400 david$ gcc -dynamiclib -o libsqlite3.dynlib libsqlite3.o&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;hacemos un file:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;bellucci:sqlite-autoconf-3070400 david$ file libsqlite3.dylib&lt;br&gt;
libsqlite3.dylib: Mach-O 64-bit dynamically linked shared library x86_64&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Si queremos que explicitamente nuestro ejecutable compile con esa librería y no la que viene (a riesgo de que no sea compatible) con&lt;br&gt;
el SDK de Mac:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;bellucci:sqlite-autoconf-3070400 david$ gcc -L. -lsqlite3 test.c -o test-dyn&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;comprobamos:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;bellucci:sqlite-autoconf-3070400 david$ otool -L test-dyn&lt;br&gt;
test-dyn:&lt;br&gt;
	libsqlite3.dylib (compatibility version 0.0.0, current version 0.0.0)&lt;br&gt;
	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 125.2.1)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Anteriormente, una simple compilación nos generaba un ejecutable enlazado dinámicamente con la sqlite3 del sistema y para ver la diferencia:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;bellucci:sqlite-autoconf-3070400 david$ otool -L test&lt;br&gt;
test:&lt;br&gt;
	/usr/lib/libsqlite3.dylib (compatibility version 9.0.0, current version 9.6.0)&lt;br&gt;
	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 125.2.1)&lt;/em&gt;&lt;/p&gt;
</description><category>c</category><category>c++</category><category>compiler</category><category>gcc</category><category>library</category><category>MacOSX</category><guid>http://deibit.com/posts/2010/12/16/crear-librerias-dinamicas-en-mac-osx/</guid><pubDate>Thu, 16 Dec 2010 20:32:21 GMT</pubDate></item><item><title>QSplitter en Qt Creator</title><link>http://deibit.com/posts/2010/12/15/qsplitter-en-qt-creator/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;Si intentamos localizar el componente en la lista que tiene el diseñador en Qt Creator no lo veremos. QSplitter, aunque se trata de un widget visual, se halla en el menú contextual, exactamente en la parte de los ‘layout’.&lt;/p&gt;
&lt;p&gt;Basta con seleccionar dos componentes adecuados (por ejemplo) y seleccionar dicha opción:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://daganu.files.wordpress.com/2010/12/splitter.png"&gt;&lt;img src="http://daganu.files.wordpress.com/2010/12/splitter.png?w=300" alt="" title="splitter" width="300" height="222" class="aligncenter size-medium wp-image-93"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Al final el resultado es el previsto:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://daganu.files.wordpress.com/2010/12/captura-de-pantalla-2010-12-15-a-las-06-04-11.png"&gt;&lt;img src="http://daganu.files.wordpress.com/2010/12/captura-de-pantalla-2010-12-15-a-las-06-04-11.png?w=300" alt="" title="qsplitter2" width="300" height="230" class="aligncenter size-medium wp-image-94"&gt;&lt;/a&gt;&lt;/p&gt;
</description><category>c++</category><category>Programming</category><category>qt</category><guid>http://deibit.com/posts/2010/12/15/qsplitter-en-qt-creator/</guid><pubDate>Wed, 15 Dec 2010 05:06:07 GMT</pubDate></item><item><title>Inicialización de variables en plantillas</title><link>http://deibit.com/posts/2010/12/06/inicializacion-de-variables-en-plantillas/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;Cuando tratamos con tipos básicos nos encontramos con el problema de no saber a que valor debemos inicializarlo.&lt;/p&gt;
&lt;p&gt;Si el tipo es un entero podría ser ’0′ pero si es float el equivalente es ’0.0′&lt;/p&gt;
&lt;p&gt;En este caso no sabemos como inicializarlo:&lt;/p&gt;
&lt;p&gt;[sourcecode language="cpp"]&lt;br&gt;
template &amp;lt;typename T&amp;gt;&lt;br&gt;
void funcion()&lt;br&gt;
{&lt;br&gt;
    T x;&lt;br&gt;
}&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;Para inicializar a cero cualquier valor disponemos de un “inicializador”: &lt;em&gt;T x = T();&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[sourcecode language="cpp"]&lt;br&gt;
template &amp;lt;typename T&amp;gt;&lt;br&gt;
void funcion()&lt;br&gt;
{&lt;br&gt;
    T x = T();&lt;br&gt;
}&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;En el caso de una función miembro, podemos hacerlo en la lista de inicialización de un constructor.&lt;/p&gt;
&lt;p&gt;[sourcecode language="cpp"]&lt;br&gt;
template &amp;lt;typename T&amp;gt;&lt;br&gt;
class Test&lt;br&gt;
{&lt;br&gt;
   T var_miembro;&lt;br&gt;
   Test() : var_miembro() {}&lt;br&gt;
};&lt;br&gt;
[/sourcecode]&lt;/p&gt;
</description><category>c++</category><category>Programming</category><category>templates</category><guid>http://deibit.com/posts/2010/12/06/inicializacion-de-variables-en-plantillas/</guid><pubDate>Mon, 06 Dec 2010 09:05:27 GMT</pubDate></item><item><title>Miembros de clase con plantillas</title><link>http://deibit.com/posts/2010/12/06/miembros-de-clase-con-plantillas/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;Aunque nuestra clase sea o no una clase plantilla sus miembros pueden ser plantillas a su vez o independientemente.&lt;/p&gt;
&lt;p&gt;Esto permite que una función miembro acepte un parámetro de tipo arbitrario.&lt;/p&gt;
&lt;p&gt;Por ejemplo al sobrecargar un constructor de copia.&lt;/p&gt;
&lt;p&gt;[sourcecode language="cpp"]&lt;br&gt;
vector&amp;lt;int&amp;gt; vInt1;&lt;br&gt;
vector&amp;lt;int&amp;gt; vInt2;&lt;br&gt;
vector&amp;lt;float&amp;gt; vFloat1;&lt;br&gt;
…&lt;br&gt;
vInt1 = vInt2; // correcto&lt;br&gt;
vInt1 = vFloat1; // error&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;En la cabecera de la clase (&lt;em&gt;clase.h&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;[sourcecode language="cpp"]&lt;br&gt;
…&lt;br&gt;
template &amp;lt;typename T2&amp;gt;&lt;br&gt;
    vector&amp;lt;T&amp;gt;&amp;amp; operator= (vector&amp;lt;T2&amp;gt; const&amp;amp;);&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;En la implementación:&lt;/p&gt;
&lt;p&gt;[sourcecode language="cpp"]&lt;br&gt;
template &amp;lt;typename T&amp;gt;  // si procede en la clase&lt;br&gt;
 template &amp;lt;typename T2&amp;gt;&lt;br&gt;
vector&amp;lt;T&amp;gt;&amp;amp; vector&amp;lt;T&amp;gt;::operator= (vector&amp;lt;T2&amp;gt; const&amp;amp; op2)&lt;br&gt;
…&lt;br&gt;
[/sourcecode]&lt;/p&gt;
</description><category>c++</category><category>Programming</category><category>templates</category><guid>http://deibit.com/posts/2010/12/06/miembros-de-clase-con-plantillas/</guid><pubDate>Mon, 06 Dec 2010 08:28:45 GMT</pubDate></item></channel></rss>