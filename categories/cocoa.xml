<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>deibit (cocoa)</title><link>http://deibit.com/</link><description></description><atom:link type="application/rss+xml" rel="self" href="http://deibit.com/categories/cocoa.xml"></atom:link><language>es</language><lastBuildDate>Sun, 17 Jul 2016 09:42:34 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Protocols in Objective C</title><link>http://deibit.com/posts/2012/06/29/protocols-in-objective-c-12/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;Just a reference note on how to implement a “protocol” in Objective C.&lt;/p&gt;
&lt;p&gt;First. We define our protocol in a file named “Protocol.h”:&lt;/p&gt;
&lt;p&gt;[sourcecode language="objc"]&lt;br&gt;
@protocol Protocol&lt;/p&gt;
&lt;p&gt;@required&lt;br&gt;
- (void)requiredMethod:(NSString*)param;&lt;/p&gt;
&lt;p&gt;@optional&lt;br&gt;
- (void)optionalMethod;&lt;/p&gt;
&lt;p&gt;@end&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;We can declare a method as optional or required. If the method is required you must implement that method in your class.&lt;/p&gt;
&lt;p&gt;Next, we decided to use the protocol in our class, first the header “UseProtocol.h” then the implementation “UseProtocol.m”:&lt;/p&gt;
&lt;p&gt;[sourcecode language="objc"]&lt;br&gt;
#import &amp;lt;Foundation/Foundation.h&amp;gt;&lt;br&gt;
#import "Protocol.h"&lt;/p&gt;
&lt;p&gt;@interface UseProtocol : NSObject &amp;lt;Protocol&amp;gt;&lt;br&gt;
@end&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;[sourcecode language="objc"]&lt;/p&gt;
&lt;p&gt;#import "UseProtocol.h"&lt;/p&gt;
&lt;p&gt;@implementation UseProtocol&lt;/p&gt;
&lt;p&gt;- (void)requiredMethod:(NSString*)param {&lt;br&gt;
 NSLog(@"%@", param);&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;@end&lt;/p&gt;
&lt;p&gt;[/sourcecode]&lt;/p&gt;
&lt;p&gt;and next we glue it up together in a main.m&lt;/p&gt;
&lt;p&gt;[sourcecode language="objc"]&lt;br&gt;
#import &amp;lt;Foundation/Foundation.h&amp;gt;&lt;br&gt;
#import "UseProtocol.h"&lt;/p&gt;
&lt;p&gt;int main(int argc, const char* argv[]) {&lt;br&gt;
 NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];&lt;br&gt;
 UseProtocol* p = [[UseProtocol alloc] init];&lt;br&gt;
 [p requiredMethod:@"test"];&lt;br&gt;
 [p release];&lt;br&gt;
 [pool drain];&lt;br&gt;
 return 0;&lt;br&gt;
}&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;We could use XCode but is too heavy for our little task…&lt;/p&gt;
&lt;p&gt;If you used an editor, you can compiled it through command line:&lt;/p&gt;
&lt;p&gt;[sourcecode]clang -framework Foundation UseProtocol.m main.m -o main[/sourcecode]&lt;/p&gt;
</description><category>cocoa</category><category>command line</category><category>mac osx</category><category>objective c</category><category>protocols</category><guid>http://deibit.com/posts/2012/06/29/protocols-in-objective-c-12/</guid><pubDate>Fri, 29 Jun 2012 10:28:17 GMT</pubDate></item></channel></rss>