<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>deibit (git)</title><link>http://deibit.com/</link><description></description><atom:link type="application/rss+xml" rel="self" href="http://deibit.com/categories/git.xml"></atom:link><language>es</language><lastBuildDate>Sun, 17 Jul 2016 09:42:36 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Git fatal error when pushing to GitHub</title><link>http://deibit.com/posts/2011/10/19/git-fatal-error-when-pushing-to-github/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;Error is:&lt;/p&gt;
&lt;p&gt;“fatal remote error … you can’t push to git…use…”&lt;/p&gt;
&lt;p&gt;I don’t know why (maybe some issues when the clone is new) but it is easily to fix, just this way:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ git push git@github.com:[username_in_github]/[project].git&lt;/code&gt;&lt;/p&gt;
</description><category>error</category><category>git</category><category>github</category><guid>http://deibit.com/posts/2011/10/19/git-fatal-error-when-pushing-to-github/</guid><pubDate>Wed, 19 Oct 2011 13:10:49 GMT</pubDate></item><item><title>Salida a color en Git</title><link>http://deibit.com/posts/2011/04/17/salida-a-color-en-git/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;Por defecto Git no usa colores en la salida de los comandos por linea. Si trabajamos bastante con la consola tener la salida a color se agradece, sobre todo para ver los parches. &lt;/p&gt;
&lt;p&gt;Para añadir esa opción en Git hay que establecer a ‘true’ uno de los valores globales de su configuración:&lt;/p&gt;
&lt;p&gt;[sourcecode]&lt;br&gt;
git config –global color.ui true&lt;br&gt;
[/sourcecode]&lt;/p&gt;
</description><category>bash</category><category>git</category><guid>http://deibit.com/posts/2011/04/17/salida-a-color-en-git/</guid><pubDate>Sun, 17 Apr 2011 20:19:20 GMT</pubDate></item><item><title>vim, Git, GitHub y Pathogen</title><link>http://deibit.com/posts/2011/04/11/vim-github-y-pathogen/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;Cuando tienes más de una máquina y Vim (o cualquier otro programa) instalado en algunas de ellas, resulta tedioso ir copiando y manteniendo al día tu archivo de configuración (.vimrc) y los diversos plugins, archivos de sintaxis o esquemas de colores.&lt;/p&gt;
&lt;p&gt;Una de las soluciones que usaba era &lt;a href="https://www.dropbox.com"&gt;DropBox&lt;/a&gt;. Tenía una carpeta donde lo guardaba todo e iba subiendo y bajando a base de linea de comandos. Bastante cómodo la verdad.&lt;/p&gt;
&lt;p&gt;Usar un gestor de versiones no es una idea nueva. Hay gente que usa Subversion para gestionar documentación con bastante éxito. &lt;/p&gt;
&lt;p&gt;Bueno, la idea es usar Git para ese control de versiones. Alojar el repositorio en &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; por comodidad y usar Pathogen (es un plugin para Vim) para cierta “magia” con los plugins.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lo primero es instalar Git y que éste responda desde la linea de comandos&lt;/strong&gt; (hay miles de guías para hacerlo). Y luego tener una cuenta en GitHub (es gratuito). Vamos, uno de los requisitos es saber manejar Git de manera básica.&lt;/p&gt;
&lt;p&gt;1.- Movemos  nuestro .vimrc a ~/.vim/vimrc (sin el ‘.’, no hace falta que esté oculto)&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash"]&lt;br&gt;
mv ~/.vimrc ~/.vim/vimrc&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;2.- Creamos un enlace simbólico para que Vim lo encuentre:&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash"]&lt;br&gt;
ln -s ~/.vim/vimrc ~/.vimrc&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;3.- Hacemos que nuestro .vim sea un repositorio de Git y agregamos los archivos iniciales:&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash"]&lt;br&gt;
cd ~/.vim&lt;br&gt;
git init&lt;br&gt;
git add .&lt;br&gt;
git commit -m "Commit inicial"&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;4.- Instalamos “&lt;a href="https://github.com/tpope/vim-pathogen"&gt;Pathogen&lt;/a&gt;“.&lt;/p&gt;
&lt;p&gt;Para instalar Pathogen tan solo hay que guardar el archivo pathogen.vim en la carpeta: ~/.vim/autoload y agregar las dos lineas siguientes a nuestro .vimrc:&lt;/p&gt;
&lt;p&gt;[sourcecode]&lt;br&gt;
call pathogen#runtime_append_all_bundles()&lt;br&gt;
call pathogen#helptags()&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;También creamos la carpeta ~/.vim/bundle&lt;/p&gt;
&lt;p&gt;Ahí, en esa carpeta es donde vamos a ir guardando todos los plugins. La gracia de esto es que tenemos &lt;a href="https://github.com/vim-scripts"&gt;tooooodos los plugins que queramos&lt;/a&gt; pero en PATHs independientes. Cada uno en su carpeta, bien ordenados sin necesidad de crear archivos sueltos por todo el .vim&lt;/p&gt;
&lt;p&gt;Basta descomprimir la carpeta de un plugin en bundle, PATHogen se encarga del resto. Pero la gracia de todo esto es que en el mismo GitHub vamos a encontrar miles de plugins y otros para Vim.&lt;/p&gt;
&lt;p&gt;¿Que significa esto?&lt;/p&gt;
&lt;p&gt;Que vamos a poder instalar plugins y poder actualizarlos desde Git. &lt;/p&gt;
&lt;p&gt;¿Como?&lt;/p&gt;
&lt;p&gt;Cada plugin irá instalado independientemente como un “submodulo” de Git en la carpeta bundle.&lt;/p&gt;
&lt;p&gt;Se acabo tener los plugins sueltos y desactualizados y el desastre que suponía el proceder a borrar alguno. Ahora si no queremos un plugin simplemente borramos la carpeta con Git y listo.&lt;/p&gt;
&lt;p&gt;Naturalmente no hace falta Git ni GitHub para trabajar con Pathogen, pero el complemento es perfecto.&lt;/p&gt;
&lt;p&gt;5.- Creamos un repositorio en GitHub, vamos a suponer que lo llamamos “vimdots”&lt;/p&gt;
&lt;p&gt;El proceso para crear un repositorio en GitHub viene perfectamente explicado en sus guías.&lt;/p&gt;
&lt;p&gt;6.- Agregar repositorio remoto a nuestro repositorio local.&lt;/p&gt;
&lt;p&gt;Esto es, asociar el repositorio que hemos creado en GitHub a lo que tenemos ya en nuestro repositorio “.vim” local. La orden sería:&lt;/p&gt;
&lt;p&gt;[sourcecode]&lt;br&gt;
cd ~/.vim&lt;br&gt;
git remote add origin git@github.com:deibit/vimdots.git&lt;br&gt;
git push -u origin master&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;Por supuesto con el nombre de nuestra cuenta y el nombre del repositorio GitHub que le hemos dado.&lt;/p&gt;
&lt;p&gt; 7.- Agregamos plugins y creamos submodulos para ellos.&lt;/p&gt;
&lt;p&gt;Lo ideal aquí sería &lt;a href="https://github.com/vim-scripts"&gt;encontrar los plugins que deseemos en GitHub&lt;/a&gt; y agregarlos simplemente con esta orden:&lt;/p&gt;
&lt;p&gt;Vamos a usar como ejemplo el plugin vim-fugitive que nos integra Git en Vim.&lt;/p&gt;
&lt;p&gt;[sourcecode]&lt;br&gt;
cd ~/.vim&lt;br&gt;
git submodule add http://github.com/tpope/vim-fugitive.git bundle/fugitive&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;Lo recomendable después de agregar, como cualquier fichero, es hacer push:&lt;/p&gt;
&lt;p&gt;[sourcecode]&lt;br&gt;
git commit -am "Agregado plugin vim-fugitive"&lt;br&gt;
git push -u origin master&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;Con esto vamos creando submodulos que son repositorios Git dentro de un repositorio Git.&lt;/p&gt;
&lt;p&gt;Los submodulos se pueden actualizar de golpe con:&lt;/p&gt;
&lt;p&gt;[sourcecode]&lt;br&gt;
git submodule update&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ACTUALIZACIÓN&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Se me olvidó comentar como hacemos para instalar este tinglado en otro ordenador. Es fácil. Lo primero es decirle a git que clone nuestro repositorio de GitHub en el directorio por defecto de Vim (~/.vim). Luego como nuestros plugins están en el directorio bundles y son a su vez repositorios de Git (ver el archivo .gitmodules) debemos de decirle a Git que proceda a instalarlos y actualizarlos también:&lt;/p&gt;
&lt;p&gt;[sourcecode]&lt;br&gt;
git clone https://deibit@github.com/deibit/vimdots.git ~/.vim&lt;br&gt;
git submodule init&lt;br&gt;
git submodule update&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;Lo último es enlazar el vimrc de nuestro repositorio local en .vim al home que es donde Vim irá a buscarlo cuando arranque:&lt;/p&gt;
&lt;p&gt;[sourcecode]&lt;br&gt;
ln -s ~/.vim/vimrc ~/.vimrc&lt;br&gt;
[/sourcecode]&lt;/p&gt;
</description><category>git</category><category>github</category><category>pathogen</category><category>vim</category><guid>http://deibit.com/posts/2011/04/11/vim-github-y-pathogen/</guid><pubDate>Mon, 11 Apr 2011 20:14:58 GMT</pubDate></item></channel></rss>