<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>deibit (http)</title><link>http://deibit.com/</link><description></description><atom:link href="http://deibit.com/categories/http.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Thu, 21 Jul 2016 20:59:50 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Miniservidor Http en Java</title><link>http://deibit.com/posts/2010/12/18/miniservidor-http-en-java/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;En Python podemos escribir un pequeño servidor web tirando del paquete SimpleHttpServer, para cosillas básicas como un pequeño interfaz web de usuario ad hoc viene muy bien, además es estándar.&lt;/p&gt;
&lt;p&gt;Andaba buscando algo parecido para Java. Swing puede ser engorroso y montar un Tomcat es como matar moscas a cañonazos para una cosa pequeña.&lt;/p&gt;
&lt;p&gt;La solución la vi por Reddit cuando uno contestó a alguien sobre frameworks sencillos. El JDK dispone de una serie de clases para este tipo de cometidos. El paquete es &lt;a href="http://download.oracle.com/javase/6/docs/jre/api/net/httpserver/spec/com/sun/net/httpserver/package-summary.html"&gt;com.sun.net.httpserver&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Con esto podemos montar un pequeño servidor al igual que con Python. Esta clase fue introducida al parecer con el JDK 1.6, solo que al estar en los paquetes sun y no en los estándar de la documentación no están tan a la vista.&lt;/p&gt;
&lt;p&gt;El código que dan de ejemplo ligeramente modificado:&lt;/p&gt;
&lt;p&gt;[sourcecode language="java"]&lt;br&gt;
package javatest;&lt;/p&gt;
&lt;p&gt;import com.sun.net.httpserver.HttpExchange;&lt;br&gt;
import com.sun.net.httpserver.HttpHandler;&lt;br&gt;
import com.sun.net.httpserver.HttpServer;&lt;br&gt;
import java.io.IOException;&lt;br&gt;
import java.io.InputStream;&lt;br&gt;
import java.io.OutputStream;&lt;br&gt;
import java.net.InetSocketAddress;&lt;/p&gt;
&lt;p&gt;/**&lt;br&gt;
 *&lt;br&gt;
 * @author david&lt;br&gt;
 */&lt;br&gt;
public class Main implements HttpHandler {&lt;/p&gt;
&lt;p&gt;    /**&lt;br&gt;
     * @param args the command line arguments&lt;br&gt;
     */&lt;br&gt;
    public static void main(String[] args) throws IOException {&lt;br&gt;
        // TODO code application logic here&lt;br&gt;
        HttpServer server = HttpServer.create();&lt;br&gt;
        server.bind(new InetSocketAddress(8000), 100);&lt;br&gt;
        server.createContext("/test", new Main());&lt;br&gt;
        server.setExecutor(null);&lt;br&gt;
        server.start();&lt;br&gt;
    }&lt;/p&gt;
&lt;p&gt;    public void handle(HttpExchange he) throws IOException {&lt;br&gt;
           InputStream is = he.getRequestBody();&lt;br&gt;
           System.out.println(is);&lt;br&gt;
           String response = "Respuesta";&lt;br&gt;
           he.sendResponseHeaders(200, response.length());&lt;br&gt;
           OutputStream os = he.getResponseBody();&lt;br&gt;
           os.write(response.getBytes());&lt;br&gt;
           os.close();&lt;br&gt;
    }&lt;br&gt;
}&lt;br&gt;
[/sourcecode]&lt;/p&gt;
</description><category>http</category><category>java</category><category>Programming</category><category>server</category><guid>http://deibit.com/posts/2010/12/18/miniservidor-http-en-java/</guid><pubDate>Sat, 18 Dec 2010 15:35:26 GMT</pubDate></item></channel></rss>