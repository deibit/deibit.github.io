<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>deibit (java)</title><link>http://deibit.com/</link><description></description><atom:link type="application/rss+xml" rel="self" href="http://deibit.com/categories/java.xml"></atom:link><language>es</language><lastBuildDate>Sun, 17 Jul 2016 09:42:34 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Damo Security Challenge VIII - Write Up</title><link>http://deibit.com/posts/2013/05/20/damo-security-challenge-viii-write-up/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;Well, the (at this time) final challenge of Damo series. A really cool one. I expected it would take me much more time but I must have been lucky solving it.&lt;/p&gt;
&lt;p&gt;This time we have to show our RE skills, more accurately on Java apps. Ok, we just download the zip that contains the GovermentFileStore.jar&lt;/p&gt;
&lt;p&gt;If we execute the app it shows a modal window asking for a username / password. I put it through a http-proxy (Burp) and sniffing all network activity with Wireshark but there weren’t activity at all. I put a wrong combination, failed of course but any network traffic…Ok, username and password are checked at home.&lt;/p&gt;
&lt;p&gt;By using a decompiler we target the custom package: com.security.challenge.eight, just wandering along the code the username/password arises:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://daganu.files.wordpress.com/2013/05/2013-05-20-111301-00001.png"&gt;&lt;img class="aligncenter size-medium wp-image-682" alt="2013-05-20 11:13:01 +00001" src="http://daganu.files.wordpress.com/2013/05/2013-05-20-111301-00001.png?w=300" width="300" height="230"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now we can upload files.I did some tries uploading little custom php shells (you know, the system($_GET['cmd']…) but it didn’t feel the way to go. Some of the advices at the challenge page says “flaws in the application”. Ok let’s change the strategy.&lt;/p&gt;
&lt;p&gt;From the captured traffic at Burp, our requests to the upload script uses a Basic Authentication coded string:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://daganu.files.wordpress.com/2013/05/2013-05-20-134505-00001.png"&gt;&lt;img class="aligncenter size-medium wp-image-683" alt="2013-05-20 13:45:05 +00001" src="http://daganu.files.wordpress.com/2013/05/2013-05-20-134505-00001.png?w=300" width="300" height="101"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;From the request we take the Basic Authentication value:&lt;/p&gt;
&lt;p&gt;Host: damo.clanteam.com&lt;br&gt;
&lt;strong&gt;Authorization: Basic YWRtaW5pc3RyYXRvcjphZGYwODkyM2RoZGZzZGZnNzQ1a2x4&lt;/strong&gt;&lt;br&gt;
Accept: */*&lt;br&gt;
Accept-Language: en&lt;br&gt;
User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)&lt;br&gt;
Connection: close&lt;/p&gt;
&lt;p&gt;When we decoded it (base64) results in:&lt;/p&gt;
&lt;p&gt;administrator:adf08923dhdfsdfg745klx&lt;/p&gt;
&lt;p&gt;Now we can tinker with it in the browser at the file_upload folder:&lt;/p&gt;
&lt;p&gt;&lt;img class="aligncenter size-medium wp-image-684" alt="2013-05-20 13:19:18 +00001" src="http://daganu.files.wordpress.com/2013/05/2013-05-20-131918-00001.png?w=300" width="300" height="191"&gt;&lt;/p&gt;
&lt;p&gt;Besides other contestants stuff the admin’s file is there. What? ok, the older one and the first from the list.&lt;/p&gt;
&lt;p&gt;Now if we try to uncompress the file (a Zip format) it ask for a password.&lt;/p&gt;
&lt;p&gt;When we upload the file it seems to be already compressed (pay attention at the PK signature of the second screenshot) so the application is compressing and cyphering the zip. Additionally the package of the decompiled Java net.lingala.zip4j confirms all.&lt;/p&gt;
&lt;p&gt;Well, again, looking at the code it looked clear:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://daganu.files.wordpress.com/2013/05/2013-05-20-132656-00001.png"&gt;&lt;img class="aligncenter size-medium wp-image-685" alt="2013-05-20 13:26:56 +00001" src="http://daganu.files.wordpress.com/2013/05/2013-05-20-132656-00001.png?w=300" width="300" height="37"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If the original filename was: &lt;em&gt;memo_to_hof_admin.txt&lt;/em&gt; We only need to know the SHA1 hash of the filename (Python):&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; hashlib.sha1(“memo_to_hof_admin.txt”).hexdigest()&lt;br&gt;
’293b663b729409237c28c2ff5659b0ba22caf50b’&lt;/p&gt;
&lt;p&gt;Uncompressing the zip gives us a txt file with the following content:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://daganu.files.wordpress.com/2013/05/2013-05-20-135525-00001.png"&gt;&lt;img class="aligncenter size-medium wp-image-686" alt="2013-05-20 13:55:25 +00001" src="http://daganu.files.wordpress.com/2013/05/2013-05-20-135525-00001.png?w=300" width="300" height="139"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And that’s all! We are done.&lt;/p&gt;
&lt;p&gt;Kudos to &lt;a href="http://damo.clanteam.com/"&gt;damo&lt;/a&gt; for the challenges, it was a pleasure to play with them.&lt;/p&gt;
</description><category>challenge</category><category>ctf</category><category>decompiler</category><category>java</category><category>writeup</category><guid>http://deibit.com/posts/2013/05/20/damo-security-challenge-viii-write-up/</guid><pubDate>Mon, 20 May 2013 12:58:38 GMT</pubDate></item><item><title>Fixing java.security.cert.CertificateException in Burp Suite</title><link>http://deibit.com/posts/2012/11/23/fixing-java-security-cert-certificateexception-in-burp-suite/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;When Burp suite accesses a server with an encrypted channel it depends in some way on the underlying Java Security layer when using java.security classes. It happens that Java 7 disables the old &lt;a href="http://en.wikipedia.org/wiki/MD2_(cryptography)"&gt;MD2&lt;/a&gt; algorithm by default in its policy file:&lt;/p&gt;
&lt;p&gt;File (windows):  &lt;em&gt;Programs Files\Java\jre7\lib\security\java.security&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;(excerpt)&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;p&gt;&lt;em&gt;jdk.certpath.disabledAlgorithms=MD2&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;# Algorithm restrictions for Secure Socket Layer/Transport Layer Security&lt;/em&gt;&lt;br&gt;
&lt;em&gt;# (SSL/TLS) processing&lt;/em&gt;&lt;br&gt;
&lt;em&gt;#&lt;/em&gt;&lt;br&gt;
&lt;em&gt;# In some environments, certain algorithms or key lengths may be undesirable&lt;/em&gt;&lt;br&gt;
&lt;em&gt;# when using SSL/TLS. This section describes the mechanism for disabling&lt;/em&gt;&lt;br&gt;
&lt;em&gt;# algorithms during SSL/TLS security parameters negotiation, including cipher&lt;/em&gt;&lt;br&gt;
&lt;em&gt;# suites selection, peer authentication and key exchange mechanisms.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;p&gt;So, if we visit any site that supports MD2 Java will raise an exception prenventing Burp from continuing its work. The infamous:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Burp proxy error: java.security.cert.CertificateException: Certificates does not conform to algorithm constraints&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Just remove the ‘MD2′ from the directive and save the file. Your problem is gone but the whole Java ecosystem is now exposed and you have to remember to add the constraint again when finishing with Burp.&lt;/p&gt;
</description><category>burp</category><category>constraint</category><category>java</category><category>proxy</category><category>ssl</category><category>web security</category><guid>http://deibit.com/posts/2012/11/23/fixing-java-security-cert-certificateexception-in-burp-suite/</guid><pubDate>Fri, 23 Nov 2012 22:20:06 GMT</pubDate></item><item><title>Añadir librerías nativas en NetBeans</title><link>http://deibit.com/posts/2010/12/18/anadir-librerias-nativas-en-netbeans/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;Compilando un proyecto en NetBeans, necesitaba referenciar librerías externas y nativas, es decir dll’s, dyn o so en Windows, Mac OSX y Linux respectivamente.&lt;/p&gt;
&lt;p&gt;En linea de comandos cuando se instancia java existe la opción de pasarle una definición con ‘-D’ y el atributo ‘java.library.path=PATH”. Con esto (en PATH añadimos la ruta entrecomillada) la VM podrá enlazar con las librerías y el programa no se quejará con un &lt;em&gt;java.lang.UnsatisfiedLinkError&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;En Eclipse es muy sencillo añadirlas a través de las propiedades del proyecto (en otro post futuro lo pondré). En NetBeans la cosa anda a medio camino entre linea de comandos e IDE.&lt;/p&gt;
&lt;p&gt;Nos vamos a las propiedades del proyecto y en Run vemos una casilla para las opciones de la VM. Allí podemos poner la misma opción como si se tratara de que la linea de comandos.&lt;/p&gt;
&lt;p&gt;Una imagen:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://daganu.files.wordpress.com/2010/12/netbeans.jpg"&gt;&lt;img src="http://daganu.files.wordpress.com/2010/12/netbeans.jpg?w=300" alt="" title="netbeans" width="300" height="218" class="aligncenter size-medium wp-image-111"&gt;&lt;/a&gt;&lt;/p&gt;
</description><category>java</category><category>library</category><category>netbeans</category><guid>http://deibit.com/posts/2010/12/18/anadir-librerias-nativas-en-netbeans/</guid><pubDate>Sat, 18 Dec 2010 16:07:18 GMT</pubDate></item><item><title>Miniservidor Http en Java</title><link>http://deibit.com/posts/2010/12/18/miniservidor-http-en-java/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;En Python podemos escribir un pequeño servidor web tirando del paquete SimpleHttpServer, para cosillas básicas como un pequeño interfaz web de usuario ad hoc viene muy bien, además es estándar.&lt;/p&gt;
&lt;p&gt;Andaba buscando algo parecido para Java. Swing puede ser engorroso y montar un Tomcat es como matar moscas a cañonazos para una cosa pequeña.&lt;/p&gt;
&lt;p&gt;La solución la vi por Reddit cuando uno contestó a alguien sobre frameworks sencillos. El JDK dispone de una serie de clases para este tipo de cometidos. El paquete es &lt;a href="http://download.oracle.com/javase/6/docs/jre/api/net/httpserver/spec/com/sun/net/httpserver/package-summary.html"&gt;com.sun.net.httpserver&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Con esto podemos montar un pequeño servidor al igual que con Python. Esta clase fue introducida al parecer con el JDK 1.6, solo que al estar en los paquetes sun y no en los estándar de la documentación no están tan a la vista.&lt;/p&gt;
&lt;p&gt;El código que dan de ejemplo ligeramente modificado:&lt;/p&gt;
&lt;p&gt;[sourcecode language="java"]&lt;br&gt;
package javatest;&lt;/p&gt;
&lt;p&gt;import com.sun.net.httpserver.HttpExchange;&lt;br&gt;
import com.sun.net.httpserver.HttpHandler;&lt;br&gt;
import com.sun.net.httpserver.HttpServer;&lt;br&gt;
import java.io.IOException;&lt;br&gt;
import java.io.InputStream;&lt;br&gt;
import java.io.OutputStream;&lt;br&gt;
import java.net.InetSocketAddress;&lt;/p&gt;
&lt;p&gt;/**&lt;br&gt;
 *&lt;br&gt;
 * @author david&lt;br&gt;
 */&lt;br&gt;
public class Main implements HttpHandler {&lt;/p&gt;
&lt;p&gt;    /**&lt;br&gt;
     * @param args the command line arguments&lt;br&gt;
     */&lt;br&gt;
    public static void main(String[] args) throws IOException {&lt;br&gt;
        // TODO code application logic here&lt;br&gt;
        HttpServer server = HttpServer.create();&lt;br&gt;
        server.bind(new InetSocketAddress(8000), 100);&lt;br&gt;
        server.createContext("/test", new Main());&lt;br&gt;
        server.setExecutor(null);&lt;br&gt;
        server.start();&lt;br&gt;
    }&lt;/p&gt;
&lt;p&gt;    public void handle(HttpExchange he) throws IOException {&lt;br&gt;
           InputStream is = he.getRequestBody();&lt;br&gt;
           System.out.println(is);&lt;br&gt;
           String response = "Respuesta";&lt;br&gt;
           he.sendResponseHeaders(200, response.length());&lt;br&gt;
           OutputStream os = he.getResponseBody();&lt;br&gt;
           os.write(response.getBytes());&lt;br&gt;
           os.close();&lt;br&gt;
    }&lt;br&gt;
}&lt;br&gt;
[/sourcecode]&lt;/p&gt;
</description><category>http</category><category>java</category><category>Programming</category><category>server</category><guid>http://deibit.com/posts/2010/12/18/miniservidor-http-en-java/</guid><pubDate>Sat, 18 Dec 2010 15:35:26 GMT</pubDate></item></channel></rss>