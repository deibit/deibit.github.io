<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>deibit (Programming)</title><link>http://deibit.com/</link><description></description><atom:link href="http://deibit.com/categories/programming.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Thu, 21 Jul 2016 20:59:49 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Solving "ld: symbol(s) not found for architecture x86_64" in OSX</title><link>http://deibit.com/posts/2013/04/11/solving-ld-symbols-not-found-for-architecture-x86_64-in-osx/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;It seems that this error is rather frequently when compiling programs. I found mine compiling a dumb example after building &lt;a href="https://github.com/LaurentGomila/SFML"&gt;SFML 2.0&lt;/a&gt; (git)&lt;/p&gt;
&lt;p&gt;After browsing several answers none of them worked for me. Making a “lipo -info” on all the framework libs gives a perfect “x86_64″ seal of approval…mmm&lt;/p&gt;
&lt;p&gt;I tried to force clang++ with the known flags combinations -m32, -m64, -std=c++11, -stdlib=libc++ and so on.&lt;/p&gt;
&lt;p&gt;None.&lt;/p&gt;
&lt;p&gt;A short time before giving up a light was turned on.&lt;/p&gt;
&lt;p&gt;I remembered installing SFML before as a shared library instead of a framework and there were a bunch of previous headers installed in /usr/local/include/SFML.&lt;/p&gt;
&lt;p&gt;Deleting it all the next go went right.&lt;/p&gt;
&lt;p&gt;The problem here was (I suspect) that the compiler was looking for the /usr/local/include before the headers that inhabit the same folder framework hence causing odd errors.&lt;/p&gt;
&lt;p&gt;Here is the output when applied the -v flag in clang++&lt;/p&gt;
&lt;p&gt;/usr/include/c++/4.2.1&lt;br&gt;
/usr/include/c++/4.2.1/backward&lt;br&gt;
/usr/local/include&lt;br&gt;
/usr/bin/../lib/clang/4.2/include&lt;br&gt;
/usr/include&lt;br&gt;
/System/Library/Frameworks (framework directory)&lt;br&gt;
/Library/Frameworks (framework directory)&lt;/p&gt;
&lt;p&gt;As you may note /usr/local/include is before /Library/Frameworks&lt;/p&gt;
</description><category>c++</category><category>clang</category><category>error</category><category>game</category><category>osx</category><category>Programming</category><category>sfml</category><guid>http://deibit.com/posts/2013/04/11/solving-ld-symbols-not-found-for-architecture-x86_64-in-osx/</guid><pubDate>Thu, 11 Apr 2013 21:00:16 GMT</pubDate></item><item><title>La sentencia 'with' de Python</title><link>http://deibit.com/posts/2011/04/04/la-sentencia-with-de-python/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;‘with’ se introdujo en Python 2.5. En esa versión no estaba disponible directamente (eso fue a partir de la 2.6) y había que importarla con ‘with_statement’.&lt;/p&gt;
&lt;p&gt;‘with’ es una sentencia relacionada con la gestión de recursos y su tratamiento cuando estos provocan una excepción o salen de su entorno.&lt;/p&gt;
&lt;p&gt;Un ejemplo simple. Queremos abrir un fichero asignándolo a una variable, algo común en el quehacer diario.&lt;/p&gt;
&lt;p&gt;[sourcecode language="python"]&lt;br&gt;
try:&lt;br&gt;
    f = open("test_with.txt", ‘w’)&lt;br&gt;
    f.write("prueba")&lt;br&gt;
except:&lt;br&gt;
    print "error al abrir fichero"&lt;br&gt;
finally:&lt;br&gt;
    if f:&lt;br&gt;
        f.close()&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;El código es bastante autoexplicativo. f es el nombre al que asignamos un objeto archivo. Esta operación, la apertura de un archivo y escritura en el, puede ocasionar varios errores de naturaleza múltiple (no esta el archivo, no tenemos permisos…). Por ello capturamos la excepción y gestionamos. Si todo sale bien pasaremos a la clausula ‘finally’ y allí gestionaremos la liberación del recurso, en este caso simplemente cerrar el archivo.&lt;/p&gt;
&lt;p&gt;En este caso, somos nosotros los que estamos gestionando el recurso al cerrarlo ocurra o no una excepción. Mientras que somos responsables de responder ante las excepciones que este objeto nos quiera comunicar, gestionar el cierre del recurso es algo que el mismo recurso podría gestionar mejor que nosotros.&lt;/p&gt;
&lt;p&gt;¿No estaría mejor abrir el archivo, operar sobre el y listo?&lt;/p&gt;
&lt;p&gt;[sourcecode language="python"]&lt;br&gt;
try:&lt;br&gt;
    with open("test22.txt",’r') as f:&lt;br&gt;
        f.write("prueba")&lt;br&gt;
except:&lt;br&gt;
    print "no esta el fichero"&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;En este fragmento ocurre eso precisamente. Gracias a ‘with’. Si observamos notaremos la ausencia del cierre del recurso, la comprobación de que sí está asignado a la variable ‘f’ y por supuesto, la clausula ‘finally’, ya que es el propio recurso quien se gestiona su propio cierre.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;¿Como ocurre esto?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cualquier tipo puede ser gestionado por ‘with’ a través de un “Manejador de contexto” (Context manager). Un manejador de contexto son dos funciones que van a ser llamadas por Python durante la ejecución. Los nombres son ‘__enter__’ y ‘__exit__’. Cuando se opera sobre el objeto se llama a ‘__enter__’ y cuando se sale, por cualquier motivo, se llama a ‘__exit__’.&lt;/p&gt;
&lt;p&gt;Un ejemplo:&lt;/p&gt;
&lt;p&gt;[sourcecode language="python"]&lt;br&gt;
class With_Test(object):&lt;br&gt;
    def __init__(self, n):&lt;br&gt;
        print "en init…"&lt;br&gt;
        self.n = n&lt;br&gt;
    def __enter__(self):&lt;br&gt;
        print "entrando…"&lt;br&gt;
        return self&lt;br&gt;
    def __exit__(self, exc_type, exec_value, traceback):&lt;br&gt;
        print "saliendo…"&lt;br&gt;
    def metodo(self):&lt;br&gt;
        print "n vale: %s" % self.n&lt;/p&gt;
&lt;p&gt;with With_Test(8) as wt:&lt;br&gt;
    wt.metodo()&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;Esto imprimirá por pantalla:&lt;/p&gt;
&lt;p&gt;[sourcecode]&lt;br&gt;
bellucci:python david$ python test_with.py&lt;br&gt;
en init…&lt;br&gt;
entrando…&lt;br&gt;
n vale: 8&lt;br&gt;
saliendo…&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;Si construimos nuestros objetos con este método abstraemos a los usuarios de nuestras clases de la gestión de cierre del recurso. La sintaxis es más clara y elegante. &lt;/p&gt;
</description><category>Programming</category><category>Python</category><guid>http://deibit.com/posts/2011/04/04/la-sentencia-with-de-python/</guid><pubDate>Mon, 04 Apr 2011 20:04:17 GMT</pubDate></item><item><title>Miniservidor Http en Java</title><link>http://deibit.com/posts/2010/12/18/miniservidor-http-en-java/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;En Python podemos escribir un pequeño servidor web tirando del paquete SimpleHttpServer, para cosillas básicas como un pequeño interfaz web de usuario ad hoc viene muy bien, además es estándar.&lt;/p&gt;
&lt;p&gt;Andaba buscando algo parecido para Java. Swing puede ser engorroso y montar un Tomcat es como matar moscas a cañonazos para una cosa pequeña.&lt;/p&gt;
&lt;p&gt;La solución la vi por Reddit cuando uno contestó a alguien sobre frameworks sencillos. El JDK dispone de una serie de clases para este tipo de cometidos. El paquete es &lt;a href="http://download.oracle.com/javase/6/docs/jre/api/net/httpserver/spec/com/sun/net/httpserver/package-summary.html"&gt;com.sun.net.httpserver&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Con esto podemos montar un pequeño servidor al igual que con Python. Esta clase fue introducida al parecer con el JDK 1.6, solo que al estar en los paquetes sun y no en los estándar de la documentación no están tan a la vista.&lt;/p&gt;
&lt;p&gt;El código que dan de ejemplo ligeramente modificado:&lt;/p&gt;
&lt;p&gt;[sourcecode language="java"]&lt;br&gt;
package javatest;&lt;/p&gt;
&lt;p&gt;import com.sun.net.httpserver.HttpExchange;&lt;br&gt;
import com.sun.net.httpserver.HttpHandler;&lt;br&gt;
import com.sun.net.httpserver.HttpServer;&lt;br&gt;
import java.io.IOException;&lt;br&gt;
import java.io.InputStream;&lt;br&gt;
import java.io.OutputStream;&lt;br&gt;
import java.net.InetSocketAddress;&lt;/p&gt;
&lt;p&gt;/**&lt;br&gt;
 *&lt;br&gt;
 * @author david&lt;br&gt;
 */&lt;br&gt;
public class Main implements HttpHandler {&lt;/p&gt;
&lt;p&gt;    /**&lt;br&gt;
     * @param args the command line arguments&lt;br&gt;
     */&lt;br&gt;
    public static void main(String[] args) throws IOException {&lt;br&gt;
        // TODO code application logic here&lt;br&gt;
        HttpServer server = HttpServer.create();&lt;br&gt;
        server.bind(new InetSocketAddress(8000), 100);&lt;br&gt;
        server.createContext("/test", new Main());&lt;br&gt;
        server.setExecutor(null);&lt;br&gt;
        server.start();&lt;br&gt;
    }&lt;/p&gt;
&lt;p&gt;    public void handle(HttpExchange he) throws IOException {&lt;br&gt;
           InputStream is = he.getRequestBody();&lt;br&gt;
           System.out.println(is);&lt;br&gt;
           String response = "Respuesta";&lt;br&gt;
           he.sendResponseHeaders(200, response.length());&lt;br&gt;
           OutputStream os = he.getResponseBody();&lt;br&gt;
           os.write(response.getBytes());&lt;br&gt;
           os.close();&lt;br&gt;
    }&lt;br&gt;
}&lt;br&gt;
[/sourcecode]&lt;/p&gt;
</description><category>http</category><category>java</category><category>Programming</category><category>server</category><guid>http://deibit.com/posts/2010/12/18/miniservidor-http-en-java/</guid><pubDate>Sat, 18 Dec 2010 15:35:26 GMT</pubDate></item><item><title>QSplitter en Qt Creator</title><link>http://deibit.com/posts/2010/12/15/qsplitter-en-qt-creator/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;Si intentamos localizar el componente en la lista que tiene el diseñador en Qt Creator no lo veremos. QSplitter, aunque se trata de un widget visual, se halla en el menú contextual, exactamente en la parte de los ‘layout’.&lt;/p&gt;
&lt;p&gt;Basta con seleccionar dos componentes adecuados (por ejemplo) y seleccionar dicha opción:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://daganu.files.wordpress.com/2010/12/splitter.png"&gt;&lt;img src="http://daganu.files.wordpress.com/2010/12/splitter.png?w=300" alt="" title="splitter" width="300" height="222" class="aligncenter size-medium wp-image-93"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Al final el resultado es el previsto:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://daganu.files.wordpress.com/2010/12/captura-de-pantalla-2010-12-15-a-las-06-04-11.png"&gt;&lt;img src="http://daganu.files.wordpress.com/2010/12/captura-de-pantalla-2010-12-15-a-las-06-04-11.png?w=300" alt="" title="qsplitter2" width="300" height="230" class="aligncenter size-medium wp-image-94"&gt;&lt;/a&gt;&lt;/p&gt;
</description><category>c++</category><category>Programming</category><category>qt</category><guid>http://deibit.com/posts/2010/12/15/qsplitter-en-qt-creator/</guid><pubDate>Wed, 15 Dec 2010 05:06:07 GMT</pubDate></item><item><title>Inicialización de variables en plantillas</title><link>http://deibit.com/posts/2010/12/06/inicializacion-de-variables-en-plantillas/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;Cuando tratamos con tipos básicos nos encontramos con el problema de no saber a que valor debemos inicializarlo.&lt;/p&gt;
&lt;p&gt;Si el tipo es un entero podría ser ’0′ pero si es float el equivalente es ’0.0′&lt;/p&gt;
&lt;p&gt;En este caso no sabemos como inicializarlo:&lt;/p&gt;
&lt;p&gt;[sourcecode language="cpp"]&lt;br&gt;
template &amp;lt;typename T&amp;gt;&lt;br&gt;
void funcion()&lt;br&gt;
{&lt;br&gt;
    T x;&lt;br&gt;
}&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;Para inicializar a cero cualquier valor disponemos de un “inicializador”: &lt;em&gt;T x = T();&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[sourcecode language="cpp"]&lt;br&gt;
template &amp;lt;typename T&amp;gt;&lt;br&gt;
void funcion()&lt;br&gt;
{&lt;br&gt;
    T x = T();&lt;br&gt;
}&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;En el caso de una función miembro, podemos hacerlo en la lista de inicialización de un constructor.&lt;/p&gt;
&lt;p&gt;[sourcecode language="cpp"]&lt;br&gt;
template &amp;lt;typename T&amp;gt;&lt;br&gt;
class Test&lt;br&gt;
{&lt;br&gt;
   T var_miembro;&lt;br&gt;
   Test() : var_miembro() {}&lt;br&gt;
};&lt;br&gt;
[/sourcecode]&lt;/p&gt;
</description><category>c++</category><category>Programming</category><category>templates</category><guid>http://deibit.com/posts/2010/12/06/inicializacion-de-variables-en-plantillas/</guid><pubDate>Mon, 06 Dec 2010 09:05:27 GMT</pubDate></item><item><title>Miembros de clase con plantillas</title><link>http://deibit.com/posts/2010/12/06/miembros-de-clase-con-plantillas/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;Aunque nuestra clase sea o no una clase plantilla sus miembros pueden ser plantillas a su vez o independientemente.&lt;/p&gt;
&lt;p&gt;Esto permite que una función miembro acepte un parámetro de tipo arbitrario.&lt;/p&gt;
&lt;p&gt;Por ejemplo al sobrecargar un constructor de copia.&lt;/p&gt;
&lt;p&gt;[sourcecode language="cpp"]&lt;br&gt;
vector&amp;lt;int&amp;gt; vInt1;&lt;br&gt;
vector&amp;lt;int&amp;gt; vInt2;&lt;br&gt;
vector&amp;lt;float&amp;gt; vFloat1;&lt;br&gt;
…&lt;br&gt;
vInt1 = vInt2; // correcto&lt;br&gt;
vInt1 = vFloat1; // error&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;En la cabecera de la clase (&lt;em&gt;clase.h&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;[sourcecode language="cpp"]&lt;br&gt;
…&lt;br&gt;
template &amp;lt;typename T2&amp;gt;&lt;br&gt;
    vector&amp;lt;T&amp;gt;&amp;amp; operator= (vector&amp;lt;T2&amp;gt; const&amp;amp;);&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;En la implementación:&lt;/p&gt;
&lt;p&gt;[sourcecode language="cpp"]&lt;br&gt;
template &amp;lt;typename T&amp;gt;  // si procede en la clase&lt;br&gt;
 template &amp;lt;typename T2&amp;gt;&lt;br&gt;
vector&amp;lt;T&amp;gt;&amp;amp; vector&amp;lt;T&amp;gt;::operator= (vector&amp;lt;T2&amp;gt; const&amp;amp; op2)&lt;br&gt;
…&lt;br&gt;
[/sourcecode]&lt;/p&gt;
</description><category>c++</category><category>Programming</category><category>templates</category><guid>http://deibit.com/posts/2010/12/06/miembros-de-clase-con-plantillas/</guid><pubDate>Mon, 06 Dec 2010 08:28:45 GMT</pubDate></item><item><title>'typename' para evitar ambigüedades</title><link>http://deibit.com/posts/2010/12/06/typename-para-evitar-ambiguedades/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;Vamos a suponer que tenemos una clase donde dentro de ella hemos definido un tipo:&lt;br&gt;
[sourcecode language="cpp"]&lt;br&gt;
…&lt;br&gt;
typedef std::vector&amp;lt;int&amp;gt; Container;&lt;br&gt;
…&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;Si hacemos referencia a este tipo para crear por ejemplo un nuevo objeto. Intuitivamente nos sale esto:&lt;/p&gt;
&lt;p&gt;[sourcecode language="cpp"]&lt;br&gt;
template &amp;lt;typename T&amp;gt;&lt;br&gt;
class CTest&lt;br&gt;
{&lt;br&gt;
   T::Container * ptr;&lt;br&gt;
};&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;Pero curiosamente lo que interpreta el compilador es que estamos multiplicando ‘ptr’ por un miembro clase de CTest.&lt;/p&gt;
&lt;p&gt;Para evitarlo se hace uso de ‘typename’.&lt;/p&gt;
&lt;p&gt;[sourcecode language="cpp"]&lt;br&gt;
template &amp;lt;typename T&amp;gt;&lt;br&gt;
class CTest&lt;br&gt;
{&lt;br&gt;
   typename T::Container * ptr;&lt;br&gt;
};&lt;br&gt;
[/sourcecode]&lt;/p&gt;
</description><category>c++</category><category>Programming</category><category>templates</category><guid>http://deibit.com/posts/2010/12/06/typename-para-evitar-ambiguedades/</guid><pubDate>Mon, 06 Dec 2010 07:28:09 GMT</pubDate></item><item><title>vim: Commandline window</title><link>http://deibit.com/posts/2010/11/22/vim-commandline-window/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;De mucha ayuda, la linea de comandos en Vim nos sirve para introducir comandos pero está limitada a una línea. &lt;/p&gt;
&lt;p&gt;Podemos abrir una ventana en vez de una línea y navegar a través del histórico:&lt;/p&gt;
&lt;p&gt;Con q/ abrimos una ventana con el histórico de búsquedas.&lt;/p&gt;
&lt;p&gt;Con q: abrimos una ventana con el histórico de comandos introducidos.&lt;/p&gt;
&lt;p&gt;Una vez dentro podemos navegar con CTRL-p o CTRL-n (previous y next, respectivamente)&lt;/p&gt;
&lt;p&gt;Para cambiar de modo CTRL-f&lt;/p&gt;
&lt;p&gt;Visto en: http://vimcasts.org/episodes/refining-search-patterns-with-the-command-line-window&lt;/p&gt;
</description><category>cookbook</category><category>Programming</category><category>vim</category><guid>http://deibit.com/posts/2010/11/22/vim-commandline-window/</guid><pubDate>Mon, 22 Nov 2010 08:07:00 GMT</pubDate></item><item><title>vim: Borrar lineas que contengan un mismo patrón</title><link>http://deibit.com/posts/2010/11/16/vim-borrar-lineas-que-contengan-un-mismo-patron/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;Copio directamente de &lt;a href="http://vim.wikia.com/wiki/Delete_all_lines_containing_a_pattern"&gt;Vim Tips&lt;/a&gt; un apunte que es bastante útil.&lt;/p&gt;
&lt;p&gt;Si queremos borrar lineas que contengan un mismo patrón, en forma de expresión regular, hacemos:&lt;/p&gt;
&lt;p&gt;g/patron/d (gREP/PATRON/dELETE)&lt;/p&gt;
&lt;p&gt;Básicamente es grepear un patrón y conectarlo a una orden, en este caso ‘d’ delete o borrar.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EDITADO:&lt;/strong&gt; Como dice un comentario, no es necesario el \s* para borrar las lineas en blanco. Esta opción su que nos serviría para borrar lineas que solo contengan espacios en blanco. Sería: g/^\s*$/d&lt;/p&gt;
&lt;p&gt;Un ejemplo, borrar todas las lineas en blanco:&lt;/p&gt;
&lt;p&gt;g/^$/d&lt;/p&gt;
&lt;p&gt;También se puede invertir el patrón (al igual que grep -v) si ponemos:&lt;/p&gt;
&lt;p&gt;g!/^$/d (nótese el signo de admiración) o cambiar la ‘g!’ por ‘v’.&lt;/p&gt;
&lt;p&gt;v/^$/d&lt;/p&gt;
&lt;p&gt;Todo esto es la misma filosofía que por ejemplo enviar las lineas que coincidan con un patrón hacia un mismo registro:&lt;/p&gt;
&lt;p&gt;g/patron/y A&lt;/p&gt;
</description><category>cookbook</category><category>Programming</category><category>vim</category><guid>http://deibit.com/posts/2010/11/16/vim-borrar-lineas-que-contengan-un-mismo-patron/</guid><pubDate>Tue, 16 Nov 2010 19:31:00 GMT</pubDate></item><item><title>vim: Scrolling</title><link>http://deibit.com/posts/2010/11/12/vim-scrolling/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;Hay varias opciones de hacer scrolling en Vim. De arriba a abajo podemos hacer:&lt;/p&gt;
&lt;p&gt;CTRL-E -&amp;gt; Bajar linea por linea &lt;br&gt;CTRL-Y -&amp;gt; Subir linea por linea&lt;/p&gt;
&lt;p&gt;CTRL-D -&amp;gt; Bajar la mitad de las lineas (Down)&lt;br&gt;CTRL-U -&amp;gt; Subir la mitad de las lineas (Up)&lt;/p&gt;
&lt;p&gt;CTRL-F -&amp;gt; Bajar una página entera (Forward)&lt;br&gt;CTRL-B -&amp;gt; Subir una página entera (Backward)&lt;/p&gt;
</description><category>cookbook</category><category>Programming</category><category>vim</category><guid>http://deibit.com/posts/2010/11/12/vim-scrolling/</guid><pubDate>Fri, 12 Nov 2010 02:05:00 GMT</pubDate></item></channel></rss>