<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>deibit (security)</title><link>http://deibit.com/</link><description></description><atom:link href="http://deibit.com/categories/security.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Thu, 21 Jul 2016 20:59:50 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Cansina Web Content Discovery Tool</title><link>http://deibit.com/posts/2013/04/18/cansina-web-content-discover-tool/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;I forgot to mention here in my blog a web pentest tool I’m making: &lt;a href="https://github.com/deibit/cansina"&gt;Cansina&lt;/a&gt;. Is just a little tool to discover by dictionary hidden content in a website. Useful (I hope) while doing web security assessment.   It is code in Python and accepts list of entries in plain text files that will use to tireless ask the website. It has a couple of interesting options and more is to come. If you are a pentester take a look at it. I hope it would be useful for you.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://daganu.files.wordpress.com/2013/04/cansina-showcase.png"&gt;&lt;img class="size-full wp-image" id="i-618" alt="Image" src="http://daganu.files.wordpress.com/2013/04/cansina-showcase.png?w=650"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;https://github.com/deibit/cansina&lt;/p&gt;
</description><category>pentesting</category><category>Python</category><category>security</category><category>tool</category><category>web</category><guid>http://deibit.com/posts/2013/04/18/cansina-web-content-discover-tool/</guid><pubDate>Thu, 18 Apr 2013 15:26:00 GMT</pubDate></item><item><title>Kevin Mitnick's books</title><link>http://deibit.com/posts/2013/04/04/kevin-mitnicks-books/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;&lt;img src="http://daganu.files.wordpress.com/2013/04/mitnicks.jpg" class="size-full" alt="Kevin Mitnick's books"&gt;&lt;/p&gt;
&lt;p&gt;A series of books by Kevin Mitnick. Social skills are the future of (in) security. &lt;/p&gt;
</description><category>books</category><category>Image</category><category>mitnick</category><category>security</category><guid>http://deibit.com/posts/2013/04/04/kevin-mitnicks-books/</guid><pubDate>Thu, 04 Apr 2013 20:28:18 GMT</pubDate></item><item><title>Pointing sqlmap obfuscated parameters in URLs</title><link>http://deibit.com/posts/2011/09/23/pointing-sqlmap-obfuscated-parameters-in-urls/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;Well I called it obfuscated parameters albeit what happens is that the params are rewritten, let’s see:&lt;/p&gt;
&lt;p&gt;This is a common URL:&lt;/p&gt;
&lt;p&gt;http://www.prisonernumbersix.com/article.php?id=1231&lt;/p&gt;
&lt;p&gt;But we can rewrite that URL and show an alternative, more beautiful:&lt;/p&gt;
&lt;p&gt;http://www.prisonernumbersix.com/article/1231&lt;/p&gt;
&lt;p&gt;sqlmap works testing every parameter by default, optionally we can point a parameter with ‘-p’ option. &lt;/p&gt;
&lt;p&gt;Problem here is that sqlmap is unaware when we try to test a “beautiful” URL.&lt;/p&gt;
&lt;p&gt;Solution is easy: mark parameter as an *&lt;/p&gt;
&lt;p&gt;Taking our example URL we call sqlmap this way:&lt;/p&gt;
&lt;p&gt;./sqlmap.py -u”http://www.prisonernumbersix.com/article/param1*” and that’s all!&lt;/p&gt;
</description><category>penetration testing</category><category>security</category><category>sqlmap</category><guid>http://deibit.com/posts/2011/09/23/pointing-sqlmap-obfuscated-parameters-in-urls/</guid><pubDate>Fri, 23 Sep 2011 06:35:37 GMT</pubDate></item></channel></rss>