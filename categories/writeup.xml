<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>deibit (writeup)</title><link>http://deibit.com/</link><description></description><atom:link href="http://deibit.com/categories/writeup.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Thu, 21 Jul 2016 20:59:48 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Damo Security Challenge VIII - Write Up</title><link>http://deibit.com/posts/2013/05/20/damo-security-challenge-viii-write-up/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;Well, the (at this time) final challenge of Damo series. A really cool one. I expected it would take me much more time but I must have been lucky solving it.&lt;/p&gt;
&lt;p&gt;This time we have to show our RE skills, more accurately on Java apps. Ok, we just download the zip that contains the GovermentFileStore.jar&lt;/p&gt;
&lt;p&gt;If we execute the app it shows a modal window asking for a username / password. I put it through a http-proxy (Burp) and sniffing all network activity with Wireshark but there weren’t activity at all. I put a wrong combination, failed of course but any network traffic…Ok, username and password are checked at home.&lt;/p&gt;
&lt;p&gt;By using a decompiler we target the custom package: com.security.challenge.eight, just wandering along the code the username/password arises:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://daganu.files.wordpress.com/2013/05/2013-05-20-111301-00001.png"&gt;&lt;img class="aligncenter size-medium wp-image-682" alt="2013-05-20 11:13:01 +00001" src="http://daganu.files.wordpress.com/2013/05/2013-05-20-111301-00001.png?w=300" width="300" height="230"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now we can upload files.I did some tries uploading little custom php shells (you know, the system($_GET['cmd']…) but it didn’t feel the way to go. Some of the advices at the challenge page says “flaws in the application”. Ok let’s change the strategy.&lt;/p&gt;
&lt;p&gt;From the captured traffic at Burp, our requests to the upload script uses a Basic Authentication coded string:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://daganu.files.wordpress.com/2013/05/2013-05-20-134505-00001.png"&gt;&lt;img class="aligncenter size-medium wp-image-683" alt="2013-05-20 13:45:05 +00001" src="http://daganu.files.wordpress.com/2013/05/2013-05-20-134505-00001.png?w=300" width="300" height="101"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;From the request we take the Basic Authentication value:&lt;/p&gt;
&lt;p&gt;Host: damo.clanteam.com&lt;br&gt;
&lt;strong&gt;Authorization: Basic YWRtaW5pc3RyYXRvcjphZGYwODkyM2RoZGZzZGZnNzQ1a2x4&lt;/strong&gt;&lt;br&gt;
Accept: */*&lt;br&gt;
Accept-Language: en&lt;br&gt;
User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)&lt;br&gt;
Connection: close&lt;/p&gt;
&lt;p&gt;When we decoded it (base64) results in:&lt;/p&gt;
&lt;p&gt;administrator:adf08923dhdfsdfg745klx&lt;/p&gt;
&lt;p&gt;Now we can tinker with it in the browser at the file_upload folder:&lt;/p&gt;
&lt;p&gt;&lt;img class="aligncenter size-medium wp-image-684" alt="2013-05-20 13:19:18 +00001" src="http://daganu.files.wordpress.com/2013/05/2013-05-20-131918-00001.png?w=300" width="300" height="191"&gt;&lt;/p&gt;
&lt;p&gt;Besides other contestants stuff the admin’s file is there. What? ok, the older one and the first from the list.&lt;/p&gt;
&lt;p&gt;Now if we try to uncompress the file (a Zip format) it ask for a password.&lt;/p&gt;
&lt;p&gt;When we upload the file it seems to be already compressed (pay attention at the PK signature of the second screenshot) so the application is compressing and cyphering the zip. Additionally the package of the decompiled Java net.lingala.zip4j confirms all.&lt;/p&gt;
&lt;p&gt;Well, again, looking at the code it looked clear:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://daganu.files.wordpress.com/2013/05/2013-05-20-132656-00001.png"&gt;&lt;img class="aligncenter size-medium wp-image-685" alt="2013-05-20 13:26:56 +00001" src="http://daganu.files.wordpress.com/2013/05/2013-05-20-132656-00001.png?w=300" width="300" height="37"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If the original filename was: &lt;em&gt;memo_to_hof_admin.txt&lt;/em&gt; We only need to know the SHA1 hash of the filename (Python):&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; hashlib.sha1(“memo_to_hof_admin.txt”).hexdigest()&lt;br&gt;
’293b663b729409237c28c2ff5659b0ba22caf50b’&lt;/p&gt;
&lt;p&gt;Uncompressing the zip gives us a txt file with the following content:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://daganu.files.wordpress.com/2013/05/2013-05-20-135525-00001.png"&gt;&lt;img class="aligncenter size-medium wp-image-686" alt="2013-05-20 13:55:25 +00001" src="http://daganu.files.wordpress.com/2013/05/2013-05-20-135525-00001.png?w=300" width="300" height="139"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And that’s all! We are done.&lt;/p&gt;
&lt;p&gt;Kudos to &lt;a href="http://damo.clanteam.com/"&gt;damo&lt;/a&gt; for the challenges, it was a pleasure to play with them.&lt;/p&gt;
</description><category>challenge</category><category>ctf</category><category>decompiler</category><category>java</category><category>writeup</category><guid>http://deibit.com/posts/2013/05/20/damo-security-challenge-viii-write-up/</guid><pubDate>Mon, 20 May 2013 12:58:38 GMT</pubDate></item><item><title>Damo Security Challenge VII - Write Up</title><link>http://deibit.com/posts/2013/05/20/damo-security-challenge-vii-write-up/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;Another write up on Damo’s Challenges. This time was the turn for VII and the topic was on WiFi caps. Really fun.&lt;/p&gt;
&lt;p&gt;All we got are some packets captured by a guy. A packet capture and some csv files from kismet, etc. We need to decrypt the packets to get the “conversation” in clear text. So we need the WEP key.&lt;/p&gt;
&lt;p&gt;If we try to use aircrack-ng with the capture it will say that the IV (initialization vector) are insufficient in number. So, how are we gonna manage to get the key?…The used router was an Eircom one. Googling it the results says some of them contains a weak algorithm when they make the default WEP key. In one of the csv files you can see the SSID of the router: “Eircom1234 5670″. Putting it in&lt;a href="http://www.bacik.ie/eircomwep/"&gt; this online key generator &lt;/a&gt;brings us some WEP keys.&lt;/p&gt;
&lt;table class=" aligncenter" border="0" cellpadding="10"&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;WEP Key 1&lt;/td&gt;
&lt;td&gt;1809d03b82b17d47d8195be596&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WEP Key 2&lt;/td&gt;
&lt;td&gt;3e4e9dd68d42d47fb87b89cbc1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WEP Key 3&lt;/td&gt;
&lt;td&gt;fd2e8feb1d511e4e1db9f6d98e&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WEP Key 3&lt;/td&gt;
&lt;td&gt;7181fdcaca488e991ed90bb124&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Using airdecap-ng with the key on the capture file output the decrypted version of the file:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://daganu.files.wordpress.com/2013/05/2013-05-20-071321-00001.png"&gt;&lt;img class="aligncenter size-medium wp-image-677" alt="2013-05-20 07:13:21 +00001" src="http://daganu.files.wordpress.com/2013/05/2013-05-20-071321-00001.png?w=300" width="300" height="178"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And opening the file with wireshark shows a nice view of the capture.&lt;/p&gt;
&lt;p&gt;damo.clanteam.com resolves to 67.220.217.235, filtering by this IP in Wireshark…&lt;/p&gt;
&lt;p&gt;&lt;a href="http://daganu.files.wordpress.com/2013/05/2013-05-20-072136-00001.png"&gt;&lt;img class="aligncenter size-medium wp-image-678" alt="2013-05-20 07:21:36 +00001" src="http://daganu.files.wordpress.com/2013/05/2013-05-20-072136-00001.png?w=300" width="300" height="178"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Looking for the right request we can see the Basic Authentication token and just by decoding it (base64):&lt;/p&gt;
&lt;p&gt;YWRtaW46eDRnaDlpMTA= -&amp;gt; admin:x4gh9i10&lt;/p&gt;
&lt;p&gt;We got the user/pass. The url to go is in the capture too:&lt;/p&gt;
&lt;p&gt;damo.clanteam.com/sch7/updatehof&lt;/p&gt;
&lt;p&gt;That’s all. We are done.&lt;/p&gt;
</description><category>challenge</category><category>ctf</category><category>wep</category><category>wifi</category><category>writeup</category><guid>http://deibit.com/posts/2013/05/20/damo-security-challenge-vii-write-up/</guid><pubDate>Mon, 20 May 2013 12:00:53 GMT</pubDate></item><item><title>Damo Security Challenge VI - Write Up</title><link>http://deibit.com/posts/2013/05/12/damo-security-challenge-vi-write-up/</link><dc:creator>David García</dc:creator><description>&lt;p&gt;I managed to have to some time to post on another write up. This is the challenge number 6 (ta-ta-taaaa), numbers IV, V, IX and X are offline by now.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://daganu.files.wordpress.com/2013/05/2013-05-12-100706-00001.png"&gt;&lt;img class="aligncenter size-medium wp-image-667" alt="2013-05-12 10:07:06 +00001" src="http://daganu.files.wordpress.com/2013/05/2013-05-12-100706-00001.png?w=300" width="300" height="203"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We have the Hall of Fame page (like previous challenges) a members area and this time a Register functionality where you can have an account.&lt;/p&gt;
&lt;p&gt;After creating an account proceed to the login page and mark the remember me box. By doing this two cookies will be created: usernamesch6 and passwordsch6. Their values are codified in base64 (The username and the sha-512 hash of the password). This behavior marks the different so the key is close to those values.&lt;/p&gt;
&lt;p&gt;The application has to check if the user is admin before write a name in the Hall of Fame (We are in Members Only Area). Only the admin user is able to write there. How would the application check if the user is really the admin?&lt;/p&gt;
&lt;p&gt;A possible SQL sentence could be this way:&lt;/p&gt;
&lt;p&gt;SELECT ‘usernamesch6′ FROM users_table WHERE admin = ‘yes’ AND password = ‘passwordsch6′;&lt;/p&gt;
&lt;p&gt;So we need to get the sentence this form:&lt;/p&gt;
&lt;p&gt;SELECT ‘usernamesch6′ FROM users_table WHERE admin = ‘yes’ AND password =’1′ OR ’1′=’1′;&lt;/p&gt;
&lt;p&gt;Then the query will be affirmative and the application would think we are admin.&lt;/p&gt;
&lt;p&gt;Because the application decodes the value in base64 we previously need to code in base64 our payload.&lt;/p&gt;
&lt;p&gt;Payload should be 1′ OR ’1′=’1 which in base64 is the string: MScgT1IgJzEnPScx&lt;/p&gt;
&lt;p&gt;We set it in our cookie passwordsch6 and work done!&lt;/p&gt;
&lt;p&gt;&lt;a href="http://daganu.files.wordpress.com/2013/05/2013-05-12-104147-00001.png"&gt;&lt;img class="aligncenter size-medium wp-image-669" alt="2013-05-12 10:41:47 +00001" src="http://daganu.files.wordpress.com/2013/05/2013-05-12-104147-00001.png?w=300" width="300" height="156"&gt;&lt;/a&gt;&lt;/p&gt;
</description><category>challenge</category><category>ctf</category><category>sql injection</category><category>web</category><category>web security</category><category>writeup</category><guid>http://deibit.com/posts/2013/05/12/damo-security-challenge-vi-write-up/</guid><pubDate>Sun, 12 May 2013 09:50:25 GMT</pubDate></item></channel></rss>